#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// ========== –ù–ê–°–¢–†–û–ô–ö–ò WiFi ==========
const char* ssid = "-_-";           // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –∏–º—è –≤–∞—à–µ–π WiFi —Å–µ—Ç–∏
const char* password = "b0ber1en0t";   // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –ø–∞—Ä–æ–ª—å –æ—Ç WiFi

// URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Flask
// –ó–ê–ú–ï–ù–ò–¢–ï YOUR_SERVER_IP –Ω–∞ IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const char* serverURL = "http://217.26.26.154:5000/api/esp32_data";

// ========== –ù–ê–°–¢–†–û–ô–ö–ò Serial2 ==========
#define RXD2 16  // GPIO16 ‚Üí TX Arduino
#define TXD2 17  // GPIO17 ‚Üí RX Arduino

// –ë—É—Ñ–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino
String serialBuffer = "";
unsigned long lastDataTime = 0;
const unsigned long DATA_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
struct SensorData {
  float temperature = 0.0;
  float pressure = 0.0;
  float humidity = 0.0;
  float gas_composition = 0.0;
  float noise_level = 0.0;
  bool dataReceived = false;
};

SensorData currentData;

void setup() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serial –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  Serial.begin(115200);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Serial2 –¥–ª—è —Å–≤—è–∑–∏ —Å Arduino
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  
  Serial.println("üöÄ ESP32 –∑–∞–ø—É—â–µ–Ω");
  Serial.println("üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino...");
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi
  connectToWiFi();
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.println("üì∂ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi...");
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WiFi!");
    Serial.print("üì° IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi!");
  }
}

void loop() {
  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino
  readFromArduino();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
  if (currentData.dataReceived && millis() - lastDataTime > DATA_TIMEOUT) {
    Serial.println("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, —Å–±—Ä–æ—Å...");
    currentData.dataReceived = false;
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (currentData.dataReceived) {
    sendSensorData();
    currentData.dataReceived = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  }
  
  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi –æ—Ç–∫–ª—é—á–µ–Ω! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...");
    connectToWiFi();
  }
  
  delay(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
}

void readFromArduino() {
  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Serial2
  while (Serial2.available()) {
    char c = Serial2.read();
    
    if (c == '\n') {
      // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      processSerialData(serialBuffer);
      serialBuffer = "";
    } else if (c != '\r') {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –±—É—Ñ–µ—Ä (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º \r)
      serialBuffer += c;
    }
  }
}

void processSerialData(String data) {
  data.trim(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  
  if (data.length() == 0) return;
  
  Serial.print("üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Arduino: ");
  Serial.println(data);
  
  // –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç Arduino: 
  // "TEMP:23.5,HUM:45.0,PRESS:101.3,GAS:450.0,NOISE:35.0"
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
  int startIndex = 0;
  int endIndex = data.indexOf(',');
  
  while (endIndex != -1) {
    String pair = data.substring(startIndex, endIndex);
    processDataPair(pair);
    
    startIndex = endIndex + 1;
    endIndex = data.indexOf(',', startIndex);
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞—Ä—É
  String lastPair = data.substring(startIndex);
  processDataPair(lastPair);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  lastDataTime = millis();
  currentData.dataReceived = true;
  
  Serial.println("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç Arduino –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
  printCurrentData();
}

void processDataPair(String pair) {
  // –§–æ—Ä–º–∞—Ç: "KEY:VALUE"
  int separatorIndex = pair.indexOf(':');
  
  if (separatorIndex == -1) return;
  
  String key = pair.substring(0, separatorIndex);
  String valueStr = pair.substring(separatorIndex + 1);
  float value = valueStr.toFloat();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (key == "TEMP") {
    currentData.temperature = value;
  } else if (key == "HUM") {
    currentData.humidity = value;
  } else if (key == "PRESS") {
    currentData.pressure = value;
  } else if (key == "GAS") {
    currentData.gas_composition = value;
  } else if (key == "NOISE") {
    currentData.noise_level = value;
  }
}

void printCurrentData() {
  Serial.println("üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:");
  Serial.print("  üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: "); Serial.print(currentData.temperature); Serial.println("¬∞C");
  Serial.print("  üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: "); Serial.print(currentData.humidity); Serial.println("%");
  Serial.print("  üìä –î–∞–≤–ª–µ–Ω–∏–µ: "); Serial.print(currentData.pressure); Serial.println(" kPa");
  Serial.print("  üå´Ô∏è –£—Ä–æ–≤–µ–Ω—å CO‚ÇÇ: "); Serial.print(currentData.gas_composition); Serial.println(" ppm");
  Serial.print("  üîä –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: "); Serial.print(currentData.noise_level); Serial.println(" dB");
}

void sendSensorData() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WiFi!");
    return;
  }
  
  HTTPClient http;
  
  // –ù–∞—á–∏–Ω–∞–µ–º HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/json");
  
  // –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç
  DynamicJsonDocument doc(512);
  doc["temperature"] = round(currentData.temperature * 10) / 10.0;
  doc["pressure"] = round(currentData.pressure * 10) / 10.0;
  doc["humidity"] = round(currentData.humidity * 10) / 10.0;
  doc["gas_composition"] = round(currentData.gas_composition * 10) / 10.0;
  doc["noise_level"] = round(currentData.noise_level * 10) / 10.0;
  
  String jsonString;
  serializeJson(doc, jsonString);
  
  Serial.println("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:");
  Serial.println(jsonString);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
  int httpResponseCode = http.POST(jsonString);
  
  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.print("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ");
    Serial.println(httpResponseCode);
    
    DynamicJsonDocument resDoc(256);
    deserializeJson(resDoc, response);
    
    if (resDoc["success"] == true) {
      Serial.println("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!");
    } else {
      Serial.print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ");
      Serial.println(resDoc["error"].as<String>());
    }
  } else {
    Serial.print("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: ");
    Serial.println(httpResponseCode);
    Serial.print("‚ùå –û—à–∏–±–∫–∞: ");
    Serial.println(http.errorToString(httpResponseCode));
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  http.end();
}